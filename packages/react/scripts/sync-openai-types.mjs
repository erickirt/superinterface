#!/usr/bin/env node
import {
  mkdir,
  readdir,
  rm,
  copyFile,
  readFile,
  writeFile,
} from 'node:fs/promises'
import { join, dirname } from 'node:path'
import { fileURLToPath } from 'node:url'

const __filename = fileURLToPath(import.meta.url)
const __dirname = dirname(__filename)
const projectRoot = join(__dirname, '..', '..', '..')
const openaiSource = join(projectRoot, 'node_modules', 'openai')
const typesRoot = join(__dirname, '..', 'types')
const vendoredRoot = join(typesRoot, 'node_modules', 'openai')
const includeExtensions = ['.d.ts', '.d.mts', '.d.cts']
const includeFilenames = new Set(['LICENSE', 'package.json'])

async function ensureVendoredTypes() {
  await rm(vendoredRoot, { recursive: true, force: true })
  await mkdir(vendoredRoot, { recursive: true })
  await copyTree(openaiSource, vendoredRoot)
  await writeIndex()
}

async function copyTree(src, dest) {
  const entries = await readdir(src, { withFileTypes: true })
  for (const entry of entries) {
    const srcPath = join(src, entry.name)
    const destPath = join(dest, entry.name)
    if (entry.isDirectory()) {
      await mkdir(destPath, { recursive: true })
      await copyTree(srcPath, destPath)
    } else if (shouldCopy(entry.name)) {
      await mkdir(dirname(destPath), { recursive: true })
      await copyFile(srcPath, destPath)
    }
  }
}

function shouldCopy(name) {
  if (includeFilenames.has(name)) return true
  return includeExtensions.some((ext) => name.endsWith(ext))
}

async function writeIndex() {
  await mkdir(typesRoot, { recursive: true })
  const banner =
    '// Auto-generated by scripts/sync-openai-types.mjs. Do not edit manually.\n'
  const contents = `${banner}/// <reference path="./node_modules/openai/index.d.ts" />\nexport * from '../dist/index.d.cts';\nexport { default } from '../dist/index.d.cts';\n`
  await writeFileIfChanged(join(typesRoot, 'index.d.ts'), contents)
}

async function writeFileIfChanged(filePath, contents) {
  try {
    const existing = await readFile(filePath, 'utf8')
    if (existing === contents) return
  } catch (_) {
    // ignore
  }
  await writeFile(filePath, contents)
}

ensureVendoredTypes().catch((error) => {
  console.error(error)
  process.exit(1)
})
